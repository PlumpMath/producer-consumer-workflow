<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1473139750846">{:repl-history {:ide [], :local [&quot;(doseq [x (range 10)]\n  (println x)\n  (println \&quot;....\&quot;))&quot; &quot;(async/&gt;!! cc 1)&quot; &quot;(async/&lt;! cc 1)&quot; &quot;cc&quot; &quot;(async/&gt;!! cc)&quot; &quot;(async/&gt;!! cc 22)&quot; &quot;(def cc (async/chan))&quot; &quot;(async/&gt;!! cc \&quot;xxxxxx\&quot;)&quot; &quot;(async/close! cc)&quot; &quot;(def cc (async/chan (async/buffer 10)))&quot; &quot;(async/&gt;!! cc \&quot;yyyy1\&quot;)&quot; &quot;(async/&gt;!! cc \&quot;yyyy\&quot;)&quot; &quot;(async/&lt;!! cc)&quot; &quot;(def c (chan 1))&quot; &quot;(async/go-loop [data (async/&lt;! c)]\n         (println \&quot;Waited for =&gt; \&quot; data)\n         (println \&quot;No recur. Won't print again\&quot;)\n         (if data\n           (recur)))&quot; &quot;(async/go-loop [data (async/&lt;! c)]\n         (println \&quot;Waited for =&gt; \&quot; data)\n         (println \&quot;No recur. Won't print again\&quot;)\n         (if data\n           (recur (async/&lt;! c))))&quot; &quot;(async/&gt;!! c \&quot;xxx\&quot;)&quot; &quot;(async/&gt;!! c \&quot;xxx1\&quot;)&quot; &quot;(def c (async/chan 1))&quot; &quot;(async/&gt;!! c \&quot;xxx2\&quot;)&quot; &quot;(async/go-loop [data (async/&lt;! c)]\n         (println \&quot;Waited for =&gt; \&quot; data)\n         (if data\n           (recur (async/&lt;! c))\n           (println \&quot;cc closed\&quot;)))&quot; &quot;(async/&gt;!! c \&quot;xxx3\&quot;)&quot; &quot;(async/&gt;!! c \&quot;xxx4\&quot;)&quot; &quot;(async/close! c)&quot; &quot;(def c (to-chan (range 10)))&quot; &quot;(def c (clojure.core.async/to-chan (range 10)))&quot; &quot;(clojure.core.async/&lt;!! c)&quot; &quot;(defn cc (chan))&quot; &quot;(defn cc (clojure.core.async/chan))&quot; &quot;(def cc (clojure.core.async/chan))&quot; &quot;()&quot; &quot;(clojure.core.async/&lt;!! cc \&quot;xx\&quot;)&quot; &quot;(clojure.core.async/&gt;!! cc \&quot;xx\&quot;)&quot; &quot;(clojure.core.async/put! cc \&quot;xx\&quot;)&quot; &quot;(clojure.core.async/&lt;!! cc)&quot; &quot;(clojure.core.async/close! cc)&quot; &quot;(-main)&quot;], :remote []}}</component>
</project>